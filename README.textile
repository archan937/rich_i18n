
h1. Rich-i18n

Enrichments (e9s) module for internationalization (i18n)

h2. Introduction

Rich-i18n is a module of E9s ("http://github.com/archan937/e9s":http://github.com/archan937/e9s) which enriches I18n, SimpleForm / Formtastic, the String and Symbol classes. This simplifies internationalization of your Rails application making a Rails developers life much easier. A list of features:

h3. I18n

* @Translate on-site@ - Just specify you want to use Rich-CMS ("http://github.com/archan937/rich_cms":http://github.com/archan937/rich_cms) and you are set to translate in the front-end
* @Default values@ - Use the translation key (or a portion) as default value: @"continue".t@ returns @"continue"@ and @"text.Welcome_to_our_site".t@ returns @"Welcome to our site"@
* @An easy interface@ - Just call the @t@ method on string or symbols to translate
* @Combine translations@ - Joining keys with spaces combines translations: @"Male / Female".t@ returns @"Man / Vrouw"@ in Dutch
* @Preserve i18n meta data@ - Rich-i18n preserves the translation @key@, @value@, @locale@ and @derivative key@ (the argument passed for translation). Enquiring this can come in handy when implementing an internationalization CMS (see "Rich-CMS":http://github.com/archan937/rich_cms).

h3. SimpleForm / Formtastic

* @Labels, seatholders and default values@ - Not only translate labels, but also hint text (so called @seatholders@) and even translate default values
* @Unobtrusive implementation@ - Translate labels and seatholders unobtrusively, in other words: leave your @simple_form_for@ / @semantic_form_for@ (view) code completely untouched
* @Specific translations@ - Not only specify general translations for labels and seatholders, but make them model or even form specific

h3. Inflections

* @Preserve character casing@ - Rich-i18n preserves the casing in your translations: @"save".t@ returns @"bewaar"@, @"Save".t@ returns @"Bewaar"@ and @"SAVE".t@ returns @"BEWAAR"@ in Dutch

h3. More available features when using E9s (enrichments)

* @Localized pluralization@ - Translations only in singular form are sufficient enough as E9s can pluralize in foreign languages
* @An easy interface for localized pluralizations@ - Just call the @pl@ method on string or symbols to pluralize
* @Preserve pluralization@ - E9s singularizes or pluralizes your translations depending on the key: @"house".t@ returns @"huis"@ and @"Houses".t@ returns @"Huizen"@ in Dutch

*Note*: Keep in mind that you will have to use E9s to do this, please visit "http://github.com/archan937/e9s":http://github.com/archan937/e9s for more information.

h2. Installation

h3. Using Rich-i18n in Rails 3

Add Rich-i18n in @Gemfile@ as a gem dependency:

<pre>
  gem "rich_i18n"
</pre>

Run the following in your console to install with Bundler:

<pre>
  bundle install
</pre>

h3. Using Rich-i18n in Rails 2

Add Rich-i18n in @environment.rb@ as a gem dependency:

<pre>
  config.gem "rich_i18n"
</pre>

Run the following in your console:

<pre>
  sudo rake gems:install
</pre>

h3. Testing Rich-i18n out-of-the-box

Run the Rails console:

h4. In Rails 3

<pre>
  rails c
</pre>

h4. In Rails 2

<pre>
  ./script/console
</pre>

Start translating in Dutch:

<pre>
  >> I18n.locale = :nl
  => :nl
  >> "Male / Female".t
  => "Man / Vrouw"
</pre>

h2. Rich-i18n Translation model

Rich-i18n requires only one entity which is the @Translation@ model and is already defined within Rich-i18n itself. It includes the "Rich::Cms::Content module":https://github.com/archan937/rich_cms/blob/edge/lib/rich/cms/content.rb defined within "Rich-CMS":https://github.com/archan937/rich_cms/tree/edge and thus uses "Moneta":https://github.com/wycats/moneta as storage engine.

At default, the @Translation@ model uses is the in-memory storage which is not preferred in most cases. To change the storage strategy, reopen the @Translation@ class and assign the storage strategy:

<pre>
  class Translation
    storage :active_record
  end
</pre>

*Note*: Make sure you have a migration which created the corresponding table.

Fortunately, Rich-i18n has a Rails generator which defines the storage strategy and create the @CreateTranslations@ ActiveRecord migration.

h4. In Rails 3

Run the following in your console:

<pre>
  rails g rich:translation -m
</pre>

*Note*: The generator has the -m or --migrate option which runs rake db:migrate after creating the files.

h4. In Rails 2

Run the following in your console:

<pre>
  script/generate rich_i18n_translation -m
</pre>

h2. Usage

h3. How to translate

Just call the @t@ method on string or symbols:

<pre>
  >> "Male / Female".t
  => "Man / Vrouw"
  >> :house.t
  => "huis"
</pre>

*Note*: @I18n.locale@ is set to @:nl@.

At default, I18n uses @I18n::Backend::Simple@ of which translations are stored within YAML files located in @config/locales@.

As of version @1.4.0@, Rich-i18n does *NOT* use @I18n::Backend::Chain@ for cascading translations anymore. During translation, Rich-i18n searches for a matching translation in the following order:

# the @Moneta@ storage engine (e.g. @ActiveRecord@ and thus @MySQL@)
# the @I18n@ translation module using @I18n.t@

h3. Default values and case preservation

When not having found a translation, Rich-i18n returns a default value based on the key passed: it splits the key on @"."@ and (sort of) humanizes the last part. Sort of, because it actually replaces @"_"@ with @" "@ and it copies the casing of the key with the @copy_case@ method of the @String@ class.

<pre>
  >> "save".t
  => "save"
  >> "homepage.header".t
  => "header"
  >> "application.index.Welcome_to_our_site".t
  => "Welcome to our site"
</pre>

h3. Populating config/locales

Store default translations within YAML files in @config/locales@. When adding a new language, it is adviced to copy a YAML file from "http://github.com/svenfuchs/rails-i18n/tree/master/rails/locale":http://github.com/svenfuchs/rails-i18n/tree/master/rails/locale in which you can add your translations.

h4. Example

<pre>
---
nl:

  word:
    "yes":   ja
    "no":    nee
    house:   huis
    letter:  brief
    sign:    teken
    users:   gebruikers
    more:    meer
</pre>

*Note*: Specified in @config/locales/nl.yml@

h3. String methods

Rich-i18n uses "Rich-Support":https://github.com/archan937/rich_support which enriches the String class with several inflection methods such as @upcase_first@, @copy_case@, @upcase_first!@ and @pluralize!@. Please visit "https://github.com/archan937/rich_support/blob/master/lib/rich/support/core/string/inflections.rb":https://github.com/archan937/rich_support/blob/master/lib/rich/support/core/string/inflections.rb to see all the methods.

h3. Combined translations

You can combine translations by using a string which consists of multiple translation keys separated with spaces @" "@.

<pre>
  >> "More users".t
  => "Meer gebruikers"
</pre>

h3. Translation meta data

When translating text, you possibly want to know the @key@, the @value@, the @locale@ and the @derivative key@ (the argument passed for translation):

<pre>
  >> "More".t
  => "Meer"
  >> "More".t.class
  => Translation
  >> pp "More".t.meta_data
  {:derivative_key=>"More",
   :derivative_value=>"Meer",
   :pluralized=>false,
   :store_key=>"nl:word.more",
   :store_value=>nil,
   :i18n_locale=>"nl",
   :i18n_key=>"word.more",
   :i18n_value=>"meer"}
  => nil
</pre>

A concatenated translation has @merged_strings@ which contains every segments:

*Note*: The examples with plural verbs, such as 'users', will only be translated to 'gebruikers' when you have required "Rich-pluralization":https://github.com/archan937/rich_pluralization.

<pre>
  >> "More users".t
  => "Meer gebruikers"
  >> "More users".t.merged_strings
  => ["Meer", " ", "gebruikers"]
  >> "More users".t.merged_strings.collect(&:class)
  => [Translation, String, Translation]
  >> pp "More users".t.merged_strings.last.meta_data
  {:derivative_key=>"users",
   :derivative_value=>"gebruikers",
   :pluralized=>true,
   :store_key=>"nl:word.user",
   :store_value=>nil,
   :i18n_locale=>"nl",
   :i18n_key=>"word.user",
   :i18n_value=>"gebruiker"}
  => nil
</pre>

h3. Translating in the front-end

*Note*: Front-end translation is only possible when you are using "E9s":https://github.com/archan937/e9s or when you have enabled "Rich-CMS":https://github.com/archan937/rich_cms Translation editing.

<pre>
  class Translation
    cmsable
  end
</pre>

Rich-CMS adds the @to_tag@ method to the Translation class. This returns the an @i18n tag@ with @HTML 5 attributes@ in which translation information is provided:

<pre>
  >> "Users".t.to_tag
  => "<i18n class=\"i18n\" data-store_key=\"nl:word.user\" data-store_value=\"\" data-derivative_key=\"Users\" data-i18n_tag=\"span\" data-i18n_translation=\"Gebruikers\"></i18n>"
</pre>

When rendering, @Rich::I18n::Actionpack::ActionView::Sanitizor@ (I know, that's a long name) will change it into a HTML 5 valid tag using "Hpricot":http://github.com/whymirror/hpricot:

<pre>
  >> Rich::I18n::Actionpack::ActionView::Sanitizor.sanitize_html "Users".t.to_tag
  => "<span data-store_key=\"nl:word.user\" class=\"i18n\" data-store_value=\"\" data-derivative_key=\"Users\">Gebruikers</span>"
</pre>

h3. I18n examples

As a result of the YAML file specified above, you will get the following translations in your Rails console:

<pre>
  >> "house".t
  => "huis"
  >> "LETTER".t
  => "BRIEF"
  >> "application.index.Welcome_to_our_site".t
  => "Welcome to our site"
  >> "Sign".t
  => "Teken"
  >> "MORE USERS".t
  => "MEER GEBRUIKERS"
  >> "Yes / No".t
  => "Ja / Nee"
</pre>

h3. Labels and seatholders

You can translate @labels@ and @seatholders@ (placeholders :D) within Formtastic forms without altering its code.

*Note*: Specified in @config/locales/nl.yml@

<pre>
---
nl:

  word:
    password:       wachtwoord

  label:
    user_name:      gebruikersnaam
    content:        bericht

    Question:
      content:      jouw vraag

    Answer:
      content:      jouw antwoord

    (search_form)
      criteria:     uw zoekcriteria

  seatholder:
    email_address:  uw.naam@een.website.nl

    Question:
      content:      Hoeveel uren zitten in een dag?

    Answer:
      content:      24 uur

    (search_form)
      criteria:     '&Voorbeeld'
</pre>

h2. Disabling Rich-i18n logging

Just like @ActiveRecord::Base.logger@ and @ActionController::Base.logger@, you can set @Rich::I18n::Engine.logger@ to @nil@ in order to disable logging messages printed by Rich-i18n.

h2. Contact me

For support, remarks and requests please mail me at "paul.engel@holder.nl":mailto:paul.engel@holder.nl.

h2. Credit

This Rails gem depends on:

i18n<br>
"http://github.com/svenfuchs/i18n":http://github.com/svenfuchs/i18n

Rich-CMS<br>
"http://codehero.es/rails_gems_plugins/rich_cms":http://codehero.es/rails_gems_plugins/rich_cms <br>
"http://github.com/archan937/rich_cms":http://github.com/archan937/rich_cms

SeatHolder<br>
"http://codehero.es/jquery_libraries/seat_holder":http://codehero.es/jquery_libraries/seat_holder <br>
"http://github.com/archan937/seat_holder":http://github.com/archan937/seat_holder

Hpricot<br>
"http://github.com/whymirror/hpricot":http://github.com/whymirror/hpricot

Formtastic (optional)<br>
"http://github.com/justinfrench/formtastic":http://github.com/justinfrench/formtastic

SimpleForm (optional)<br>
"https://github.com/plataformatec/simple_form":https://github.com/plataformatec/simple_form

h2. ToDo's

* Use a better implementation to tackle String interpolation (e.g. "foo #{"bar".t}") to preserve meta data

h2. Enrichments

The all-in-one gem at - "http://codehero.es/rails_gems_plugins/e9s":http://codehero.es/rails_gems_plugins/e9s - "http://github.com/archan937/e9s":http://github.com/archan937/e9s

h3. E9s modules

* Rich-Support <br> "http://codehero.es":http://codehero.es <br> "http://github.com/archan937/rich_support":http://github.com/archan937/rich_support
* Rich-CMS <br> "http://codehero.es/rails_gems_plugins/rich_cms":http://codehero.es/rails_gems_plugins/rich_cms <br> "http://github.com/archan937/rich_cms":http://github.com/archan937/rich_cms
* Rich-i18n <br> "http://codehero.es/rails_gems_plugins/rich_i18n":http://codehero.es/rails_gems_plugins/rich_i18n <br> "http://github.com/archan937/rich_i18n":http://github.com/archan937/rich_i18n
* Rich-pluralization <br> "http://codehero.es/rails_gems_plugins/rich_pluralization":http://codehero.es/rails_gems_plugins/rich_pluralization <br> "http://github.com/archan937/rich_pluralization":http://github.com/archan937/rich_pluralization

h2. License

Copyright (c) 2011 Paul Engel, released under the MIT license

"http://holder.nl":http://holder.nl - "http://codehero.es":http://codehero.es - "http://gettopup.com":http://gettopup.com - "http://twitter.com/archan937":http://twitter.com/archan937 - "paul.engel@holder.nl":mailto:paul.engel@holder.nl

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
